version: "3.9"

services:
  mongodb:
    image: mongo:7.0
    container_name: portfolio-mongodb
    restart: unless-stopped
    ports:
      - "${MONGODB_PORT:-27018}:27017"   # host:container
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 20s

  backend:
    build: ./backend
    image: adrian-pop-consultant-backend
    container_name: portfolio-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8002}:8000"     # host:container
    environment:
      # Use your .env values directly
      MONGO_URL: ${MONGO_URL}            # already URL-encoded (+ as %2B) â€” do NOT re-encode
      MONGO_DB: ${DB_NAME}               # server.py expects MONGO_DB
      PYTHONUNBUFFERED: "1"
      ENVIRONMENT: ${ENVIRONMENT:-production}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request,sys\nsys.exit(0 if urllib.request.urlopen('http://localhost:8000/health', timeout=5).status==200 else 1)\nPY"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  frontend:
    build: ./frontend
    image: adrian-pop-consultant-frontend
    container_name: portfolio-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"      # adjust if you serve via nginx separately
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
